[MASTER]

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=ompl,brainos

# Add files or directories to the blacklist. They should be base names, not
# paths.
# Braincorp: This seems to be buggy for files and works on directories only
ignore=scipy_functions

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Use multiple processes to speed up Pylint.
jobs=8

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=misc.bc_linters.check_illegal_imports, misc.bc_linters.check_illegal_constructs, misc.bc_linters.docstring_checker

# Pickle collected data for later comparisons.
persistent=yes

# Specify a configuration file.
#rcfile=

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"

# Invalid invalid-unary-operand-type disabled due to bug: https://github.com/PyCQA/pylint/issues/1558 invalid-unary-operand-type  is falsely triggered on numpy
# This was fixed in astroid 1.6.4
# invalid-unary-operand-type disabled again due to error on these lines from planning/oriented_a_star.py
#   n_x = np.vstack((n_x, -n_x))[None, None]
#   n_y = np.vstack((n_y, -n_y))[None, None]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.

# Apparrently, there are globally disabled errors that you have to enable automatically
disable=missing-docstring,  # runs in a separate linter session
        empty-docstring,  # runs in a separate linter session
        fixme,  # not used at BC
        bare-except,  # justified most often than not
        broad-except,  # justified most often than not
        logging-not-lazy,  # doesn't seem to be useful at this step (logging is not a bottleneck)
        logging-format-interpolation,  # doesn't seem to be useful at this step (logging is not a bottleneck)
        protected-access,  # runs in a separate linter session
        no-init,  # triggers false positives for enumerations and dummy test classes. Its not clear why is it bad to have no init, especially if attribute-defined-outside-init is on
        pointless-string-statement,  # triggers false positives on freefloating doc strings that could be useful to describe long algorithms and modules
        no-else-return,  # this says that no else branch needed if 'if' statement returns. However sometimes it much cleaner to read code that has if and else with returns when number of lines in the statements is balanced.
        len-as-condition,  # suggests to check if list as opposed to if len(list) which might be less clear sometimes
        old-style-class,  # enforces inheritance from "object" that is remove in python3 anyway and doesn't give much benefits
        wrong-import-order, ungrouped-imports, wrong-import-position,  # enforces nice import structure (first libraries, then shining)
        bad-whitespace,  # taken care by pep8 rules
        bad-continuation,  # taken care by pep8 rules
        trailing-whitespace,  # taken care by pep8 rules
        consider-iterating-dictionary,  # this suggests to replace "for k in dict.keys()" with "for k in dict" which is less clear sometimes
        invalid-name,  # runs in a separate linter session
        redefined-outer-name,  # this is a useful warning in python, but unfortunately we need to get rid of majority of __main__ functions or make a rule to use main() function,
        bc-missing-docstring,  # runs in a separate session
        bc-empty-docstring,  # runs in a separate session
        argument-after-return-docstring,  # runs in a separate session
        return-after-return-docstring,  # runs in a separate session
        empty-function-description-docstring,  # runs in a separate session
        missing-argument-docstring,  # runs in a separate session
        extra-argument-docstring,  # runs in a separate session
        no-return-docstring,  # runs in a separate session
        unnecessary-return-docstring,  # runs in a separate session
        wrong-parameter-order-docstring,  # runs in a separate session
        duplicate-argument-docstring,  # runs in a separate session
        assignment-from-no-return,  # x = np.zeros_like() throws this https://github.com/PyCQA/pylint/issues/2767
        unsupported-assignment-operation  # np.zeros_like() -> assignment throws this https://github.com/PyCQA/pylint/issues/2767


enable =print-statement,
        parameter-unpacking,
        unpacking-in-except,
        old-raise-syntax,
        backtick,
        long-suffix,
        old-ne-operator,
        old-octal-literal,
        import-star-module-level,
        non-ascii-bytes-literal,
        invalid-unicode-literal,
        raw-checker-failed,
        bad-inline-option,
        # locally-disabled,
        # locally-enabled,
        # file-ignored,
        # suppressed-message,
        # useless-suppression,
        deprecated-pragma,
        apply-builtin,
        # basestring-builtin,
        buffer-builtin,
        cmp-builtin,
        coerce-builtin,
        execfile-builtin,
        file-builtin,
        # long-builtin,
        raw_input-builtin,
        reduce-builtin,  # fixable by adding from functools import reduce
        standarderror-builtin,
        # unicode-builtin,
        xrange-builtin,
        coerce-method,
        delslice-method,
        getslice-method,
        setslice-method,
        no-absolute-import,
        old-division,
        dict-iter-method,
        dict-view-method,
        next-method-called,
        # metaclass-assignment,
        indexing-exception,
        raising-string,
        reload-builtin,
        oct-method,
        hex-method,
        nonzero-method,
        cmp-method,
        input-builtin,
        round-builtin,
        intern-builtin,
        unichr-builtin,
        map-builtin-not-iterating,
        zip-builtin-not-iterating,
        range-builtin-not-iterating,
        using-cmp-argument,
        eq-without-hash,
        div-method,
        idiv-method,
        rdiv-method,
        exception-message-attribute,
        invalid-str-codec,
        sys-max-int,
        # bad-python3-import,
        deprecated-string-function,
        deprecated-str-translate-call,
        deprecated-itertools-function,
        deprecated-types-field,
        next-method-defined,
        dict-items-not-iterating,
        dict-keys-not-iterating,
        dict-values-not-iterating,
        deprecated-operator-function,
        deprecated-urllib-function,
        xreadlines-attribute,
        deprecated-sys-function,
        exception-escape,
        comprehension-escape,
        invalid-unary-operand-type,
        bad-except-order,
        bad-exception-context,
        raising-non-exception,
        catching-non-exception,
        raising-bad-type,
        duplicate-except,
        nonstandard-exception,
        binary-op-exception,
        lost-exception,
        deprecated-module,
        relative-import,
        wildcard-import,
        unused-wildcard-import,
        cyclic-import,
        import-self,
        unidiomatic-typecheck,
        filter-builtin-not-iterating
        missing-format-attribute,
        invalid-format-index,
        anomalous-backslash-in-string,
        anomalous-unicode-escape-in-string,
        bad-open-mode,
        boolean-datetime,
        redundant-unittest-assert,
        deprecated-method,
        bad-thread-instantiation,
        shallow-copy-environ
        raising-format-tuple,
        property-on-old-class,
        keyword-arg-before-vararg,
        bad-format-string-key,
        unused-format-string-key,
        bad-format-string,
        missing-format-argument-key,
        unused-format-string-argument,
        format-combined-specification,
        undefined-loop-variable,
        invalid-encoded-data,
        global-variable-undefined,
        global-variable-not-assigned,
        global-statement,
        global-at-module-level,
        useless-super-delegation,
        unnecessary-semicolon,
        bad-indentation,
        mixed-indentation,
        lowercase-l-suffix,
        misplaced-future,
        confusing-with-statement,
        using-constant-test,
        assert-on-tuple,
        bad-staticmethod-argument,
        arguments-differ,
        signature-differs,
        abstract-method,
        super-init-not-called,
        non-parent-init-called,
        pointless-statement,
        expression-not-assigned,
        unnecessary-pass,
        unnecessary-lambda,
        duplicate-key,
        deprecated-lambda,
        assign-to-new-keyword,
        useless-else-on-loop,
        simplifiable-if-statement,
        redefined-argument-from-local,
        consider-using-ternary,
        trailing-comma-tuple,
        stop-iteration-return,
        simplify-boolean-expression,
        inconsistent-return-statements,
        unreachable,
        too-many-ancestors,
        too-many-boolean-expressions,
        consider-merging-isinstance,
        exec-used,
        eval-used,
        bad-format-character,
        truncated-format-string,
        mixed-format-string,
        format-needs-mapping,
        missing-format-string-key,
        too-many-format-args,
        too-few-format-args,
        bad-str-strip-call,
        yield-inside-async-function,
        not-async-context-manager,
        literal-comparison,
        no-classmethod-decorator,
        no-staticmethod-decorator,
        duplicate-code,
        unexpected-keyword-arg,
        redundant-keyword-arg,
        missing-kwoa,
        invalid-sequence-index,
        invalid-slice-index,
        assignment-from-none,
        not-context-manager,
        invalid-unary-operand-type,
        unsupported-binary-operation,
        repeated-keyword,
        not-an-iterable,
        not-a-mapping,
        unsupported-membership-test,
        unsubscriptable-object,
        # unsupported-assignment-operation,  # https://github.com/PyCQA/pylint/issues/2767
        unsupported-delete-operation,
        invalid-metaclass,
        logging-unsupported-format,
        logging-format-truncated,
        logging-too-many-args,
        logging-too-few-args,
        undefined-variable,
        undefined-all-variable,
        invalid-all-object,
        no-name-in-module,
        unbalanced-tuple-unpacking,
        unpacking-non-sequence,
        misplaced-bare-raise,
        notimplemented-raised,
        slots-on-old-class,
        super-on-old-class,
        bad-super-call,
        missing-super-argument,
        no-member,
        not-callable,
        # assignment-from-no-return,  # https://github.com/PyCQA/pylint/issues/2767
        no-value-for-parameter,
        no-method-argument,
        no-self-argument,
        invalid-slots-object,
        assigning-non-slot,
        invalid-slots,
        inherit-non-class,
        inconsistent-mro,
        duplicate-bases,
        non-iterator-returned,
        unexpected-special-method-signature,
        invalid-length-returned,
        import-error,
        relative-beyond-top-level,
        used-before-assignment,
        return-outside-function,
        yield-outside-function,
        return-arg-in-generator,
        nonexistent-operator,
        duplicate-argument-name,
        abstract-class-instantiated,
        bad-reversed-sequence,
        too-many-star-expressions,
        invalid-star-assignment-target,
        star-needs-assignment-target,
        nonlocal-and-global,
        continue-in-finally,
        nonlocal-without-binding,
        used-prior-global-declaration,
        method-hidden,
        access-member-before-definition,
        multiple-imports,
        syntax-error,
        unrecognized-inline-option,
        bad-option-value,
        init-is-generator,
        return-in-init,
        function-redefined,
        not-in-loop,
        mixed-line-endings,
        unexpected-line-ending-format,
        wrong-spelling-in-comment,
        wrong-spelling-in-docstring,
        invalid-characters-in-docstring,
        unneeded-not,
        singleton-comparison,
        misplaced-comparison-constant,
        consider-using-enumerate,
        bad-classmethod-argument,
        bad-mcs-method-argument,
        bad-mcs-classmethod-argument,
        single-string-used-for-slots,
        missing-final-newline,
        trailing-newlines,
        multiple-statements,
        blacklisted-name,
        redefine-in-handler,
        dangerous-default-value,
        line-too-long,
        unused-import,
        reimported,
        infunction-import,
        catkin-import,
        calibration-import,
        test-import,
        sandbox-import,
        no-properties,
        cell-var-from-loop,
        attribute-defined-outside-init,
        unused-variable,
        unused-argument,
        redefined-builtin,
        too-many-lines,
        too-many-function-args,
        too-many-arguments,
        too-many-locals,
        too-few-public-methods,
        too-many-public-methods,
        too-many-statements,
        too-many-instance-attributes,
        too-many-branches,
        too-many-nested-blocks,
        too-many-return-statements,
        superfluous-parens,
        no-self-use

[REPORTS]

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages
reports=no

# Activate the evaluation score.
score=yes


[REFACTORING]

# Maximum number of nested blocks for function / method body
max-nested-blocks=7  # default is 5

# Complete name of functions that never returns. When checking for
# inconsistent-return-statements if a never returning function is called then
# it will be considered as an explicit return statement and no message will be
# printed.
never-returning-functions=optparse.Values,sys.exit


[FORMAT]

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Maximum number of characters on a single line.
max-line-length=180

# Maximum number of lines in a module
max-module-lines=2800

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,
               dict-separator

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt=no

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no


[VARIABLES]

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,
          _cb,
          _on,
          on,
          callback,
          event,
          Event,
          hook,
          _handle,
          handler

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_|args|kwargs

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*|^ignored_|^unused_

# Tells whether we should check for unused import in __init__ files.
init-import=no

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,io,builtins


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,
      XXX,
      TODO

[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging


[TYPECHECK]

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager, tensorflow.python.util.tf_contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference
# can return multiple potential results while evaluating a Python object, but
# some branches might not be evaluated, which results in partial inference. In
# that case, it might be useful to still emit no-member and other checks for
# the rest of the inferred objects.
ignore-on-opaque-inference=yes

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,
                thread._local,
                _thread._local,
                numpy,
                capnp,
                responses,  # https://github.com/getsentry/responses/issues/74
                LookupDict,
                EmitterGroup  # vispy class that has many generated memebers

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
# pylint 1.9.2: https://github.com/PyCQA/pylint/blob/2b24ec063a5355648d286633e37f084ced4f1604/pylint/checkers/variables.py
# Unix pattern matching doesn't work (see line 1478)
ignored-modules=
    numpy,
    scipy,
    numpy.random,
    numpy.random.mtrand,
    cv2,
    matplotlib.cm,
    tf,
    PySide.QtCore,
    PySide.QtGui,
    PySide.QtTest,
    edward.models,
    evdev.ecodes,
    tensorflow,
    dummy_threading,
    amcl,
    shining_software.scipy_functions,
    standalone_rgbd_pipeline._wrapper_pixel_raytrace_module,
    standalone_rgbd_pipeline._wrapper_voxel_raytrace_module,
    standalone_rgbd_pipeline._wrapper_voxel_utils_module,
    standalone_rgbd_pipeline._wrapper_connected_components_module,
    shining_mapping_utils._wrapper_pyramid_matcher_module,
    standalone_sbpl,
    scipy_slim,
    scipy_slim.spatial.ckdtree,
    standalone_sbpl._wrapper_sbpl_module,
    lowsheen_lib,
    vispy.scene,
    brain,
    brain.shining_utils,
    capnp,
    capnp.lib.capnp

# Show a hint with possible names when a member name was not found. The aspect
# of finding the hint is based on edit distance.
missing-member-hint=yes

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance=1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices=1


[SIMILARITIES]

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no

# Minimum lines number of a similarity.
min-similarity-lines=4

[BASIC]

# Naming style matching correct argument names
# argument-naming-style=snake_case

# Regular expression matching correct argument names. Overrides argument-
# naming-style
argument-rgx=(([a-z_][a-z0-9_]{2,50})|(_[a-z0-9_]*)|(__[a-z][a-z0-9_]+__)|([a-z])|([a-z][0-9])|([a-z][a-z])|(dt|ms|dx|dy|dz|im|img|px|py|cc|ss|fp|df|ix|iy))$

# Naming style matching correct attribute names
# attr-naming-style=snake_case

# Regular expression matching correct attribute names. Overrides attr-naming-
# style
attr-rgx=(([a-z_][a-z0-9_]{2,50})|(_[a-z0-9_]*)|(__[a-z][a-z0-9_]+__)|([a-z])|([a-z][0-9]))$

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,
          bar,
          baz,
          toto,
          tutu,
          tata,


# Naming style matching correct class attribute names
class-attribute-naming-style=any

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style
#class-attribute-rgx=

# Naming style matching correct class names
class-naming-style=PascalCase

# Regular expression matching correct class names. Overrides class-naming-style
#class-rgx=

# Naming style matching correct constant names
# const-naming-style=UPPER_CASE

# Regular expression matching correct constant names. Overrides const-naming-
# style
# allow upper case as well as camel case for constants
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__)|([a-z_][a-z0-9_]{2,50})|(_[a-z0-9_]*)|(__[a-z][a-z0-9_]+__)|([a-z])|([a-z][0-9]))$

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1
bc-docstring-min-length=-1

# Naming style matching correct function names
# function-naming-style=snake_case

# Regular expression matching correct function names. Overrides function-
# naming-style
function-rgx=(([a-z_][a-z0-9_]{2,60})|(_[a-z0-9_]*)|(__[a-z][a-z0-9_]+__))$

# Good variable names which should always be accepted, separated by a comma
good-names=i,
           j,
           k,
           ex,
           Run,
           _

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# Naming style matching correct inline iteration names
inlinevar-naming-style=any

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style
#inlinevar-rgx=

# Naming style matching correct method names
# method-naming-style=snake_case

# Regular expression matching correct method names. Overrides method-naming-
# style
method-rgx=(([a-z_][a-z0-9_]{2,50})|(_[a-z0-9_]*)|(__[a-z][a-z0-9_]+__))$

# Naming style matching correct module names
module-naming-style=snake_case

# Regular expression matching correct module names. Overrides module-naming-
# style
#module-rgx=

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_
bc-no-docstring-rgx=^__
bc-has-to-have-docstring-rgx=(__init__|__new__)

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty

# Naming style matching correct variable names
# variable-naming-style=snake_case

# Regular expression matching correct variable names. Overrides variable-
# naming-style
variable-rgx=(([a-z_][a-z0-9_]{2,50})|(_[a-z0-9_]*)|(__[a-z][a-z0-9_]+__)|([a-z])|([a-z][0-9])|([a-z][a-z])|(dt|ms|dx|dy|dz|im|img|px|py|cc|ss|fp|df|ix|iy))$


[SPELLING]

# Limits count of emitted suggestions for spelling mistakes
max-spelling-suggestions=4

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[IMPORTS]

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all=no

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,
                   TERMIOS,
                   Bastion,
                   rexec,
                   PyQt4,  # use PySide
                   PyQt5  # use PySide

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=dependencies.dot

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant


[DESIGN]

# Maximum number of arguments for function / method
max-args=32  # default is 5

# Maximum number of attributes for a class (see R0902).
max-attributes=67  # default is 7

# Maximum number of boolean expressions in a if statement
max-bool-expr=5

# Maximum number of branch for function / method body
max-branches=54  # default is 12

# Maximum number of locals for function / method body
max-locals=112  # default is 15

# Maximum number of parents for a class (see R0901).
max-parents=8  # default is 7, but mock.MagicMock has 7 parents right away

# Maximum number of public methods for a class (see R0904).
max-public-methods=37  # default is 20

# Maximum number of return / yield for function / method body
max-returns=12  # default is 6

# Maximum number of statements in function / method body
max-statements=165  # default is 50

# Minimum number of public methods for a class (see R0903).
min-public-methods=0  # default is 2

[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,
                      __new__,
                      setUp

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception
